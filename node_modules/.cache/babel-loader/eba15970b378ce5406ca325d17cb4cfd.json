{"ast":null,"code":"var _jsxFileName = \"/home/conan/mars_rover/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport rover from \"./Rover\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function fetchCsv(dispatch) {\n  const response = await fetch(CSV_ADDRESS);\n\n  if (response.body != null) {\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder(\"utf-8\");\n    const csv = await decoder.decode(result.value);\n    Papa.parse(csv, {\n      skipEmptyLines: true,\n      complete: ({\n        data\n      }) => {\n        const aa = data.map(data => {\n          const [x, y, direction] = data[0].substring(1).split(\" \");\n          const mainCommands = data[1].slice(1, -1).split(\"\");\n          return {\n            initialPosition: {\n              x: parseInt(x),\n              y: parseInt(y),\n              direction: direction\n            },\n            commands: mainCommands\n          };\n        });\n        dispatch({\n          type: \"loaded_rovers\",\n          payload: aa\n        });\n      }\n    });\n  }\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return { ...state,\n        roversLeft: action.payload\n      };\n\n    case \"change_rovers\":\n      return { ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [...state.existingRoversPosition, action.payload]\n      };\n  }\n}\n\nconst CSV_ADDRESS = \"rover_instructions.csv\";\n\nfunction App() {\n  _s();\n\n  // Define how big the terrian will be\n  const maxTerrainSize = {\n    x: 5,\n    y: 5\n  };\n  const [{\n    existingRoversPosition,\n    roversLeft\n  }, dispatch] = useReducer(reducer, {\n    existingRoversPosition: [],\n    roversLeft: []\n  });\n  useEffect(() => {\n    fetchCsv(dispatch);\n  }, []);\n  useEffect(() => {\n    //After Processing the first Rover we can move on to the next one\n    if (roversLeft.length > 0) {\n      const currentRover = roversLeft[0];\n      const roverFinalPosition = rover(maxTerrainSize, currentRover.initialPosition, currentRover.commands, existingRoversPosition);\n      dispatch({\n        type: \"change_rovers\",\n        payload: roverFinalPosition\n      });\n    }\n  }, [roversLeft, existingRoversPosition, maxTerrainSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [...Array(maxTerrainSize.x)].map((e, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [...Array(maxTerrainSize.y)].map((e, j) => {\n          const roverHere = existingRoversPosition.findIndex(rover => {\n            return rover.x === i && rover.y === j;\n          });\n          return roverHere !== -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item item2\",\n            children: [\"Rover \", roverHere + 1]\n          }, `row-${i}-col-${j}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" item \",\n            children: \"\\xA0\"\n          }, `row-${i}-col-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this);\n        })\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xcfIFu9ozLAMWCofSJumnmxKTRQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/conan/mars_rover/src/App.tsx"],"names":["React","useEffect","useReducer","rover","Papa","fetchCsv","dispatch","response","fetch","CSV_ADDRESS","body","reader","getReader","result","read","decoder","TextDecoder","csv","decode","value","parse","skipEmptyLines","complete","data","aa","map","x","y","direction","substring","split","mainCommands","slice","initialPosition","parseInt","commands","type","payload","reducer","state","action","roversLeft","existingRoversPosition","App","maxTerrainSize","length","currentRover","roverFinalPosition","Array","e","i","j","roverHere","findIndex"],"mappings":"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","sourcesContent":["import React, { Dispatch, Reducer, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport rover from \"./Rover\";\nimport { Command, Direction, Rovers } from \"./rover.types\";\nimport Papa from \"papaparse\";\n\ninterface UndeployedRover {\n  initialPosition: Rovers;\n  commands: Command[];\n}\n\ninterface Data {\n  data: string[][];\n}\ntype State = {\n  existingRoversPosition: Rovers[];\n  roversLeft: UndeployedRover[];\n};\n\nasync function fetchCsv(dispatch: Dispatch<Action>) {\n  const response = await fetch(CSV_ADDRESS);\n\n  if (response.body != null) {\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder(\"utf-8\");\n    const csv = await decoder.decode(result.value);\n\n    Papa.parse(csv, {\n      skipEmptyLines: true,\n      complete: ({ data }: Data) => {\n        const aa = data.map((data) => {\n          const [x, y, direction] = data[0].substring(1).split(\" \");\n          const mainCommands = data[1].slice(1, -1).split(\"\");\n\n          return {\n            initialPosition: {\n              x: parseInt(x),\n              y: parseInt(y),\n              direction: direction as Direction,\n            },\n            commands: mainCommands as Command[],\n          };\n        });\n        dispatch({\n          type: \"loaded_rovers\",\n          payload: aa as UndeployedRover[],\n        });\n      },\n    });\n  }\n}\n\ntype Action =\n  | { type: \"loaded_rovers\"; payload: UndeployedRover[] }\n  | { type: \"change_rovers\"; payload: Rovers };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return {\n        ...state,\n        roversLeft: action.payload,\n      };\n    case \"change_rovers\":\n      return {\n        ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [\n          ...state.existingRoversPosition,\n          action.payload,\n        ],\n      };\n  }\n}\nconst CSV_ADDRESS = \"rover_instructions.csv\";\nfunction App() {\n  // Define how big the terrian will be\n  const maxTerrainSize = { x: 5, y: 5 };\n\n  const [{ existingRoversPosition, roversLeft }, dispatch] = useReducer<\n    Reducer<State, Action>\n  >(reducer, {\n    existingRoversPosition: [],\n    roversLeft: [],\n  });\n\n  useEffect(() => {\n    fetchCsv(dispatch);\n  }, []);\n\n  useEffect(() => {\n    //After Processing the first Rover we can move on to the next one\n    if (roversLeft.length > 0) {\n      const currentRover = roversLeft[0];\n\n      const roverFinalPosition = rover(\n        maxTerrainSize,\n        currentRover.initialPosition,\n        currentRover.commands,\n        existingRoversPosition\n      );\n\n      dispatch({ type: \"change_rovers\", payload: roverFinalPosition });\n    }\n  }, [roversLeft, existingRoversPosition, maxTerrainSize]);\n\n  return (\n    <div className=\"App\">\n      {[...Array(maxTerrainSize.x)].map((e, i) => {\n        return (\n          <div className=\"container\" key={`row-${i}`}>\n            {[...Array(maxTerrainSize.y)].map((e, j) => {\n              const roverHere = existingRoversPosition.findIndex((rover) => {\n                return rover.x === i && rover.y === j;\n              });\n              return roverHere !== -1 ? (\n                <div className=\"item item2\" key={`row-${i}-col-${j}`}>\n                  Rover {roverHere + 1}\n                </div>\n              ) : (\n                <div className=\" item \" key={`row-${i}-col-${j}`}>\n                  &nbsp;\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}