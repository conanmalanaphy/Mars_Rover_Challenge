{"ast":null,"code":"var _jsxFileName = \"/home/conan/mars_rover/src/RoversGrid/RoversGrid.tsx\",\n    _s = $RefreshSig$();\n\nimport Papa from \"papaparse\";\nimport React, { useEffect, useReducer } from \"react\";\nimport startRover from \"../Rover/rover\";\nimport \"./rover-grid.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function processRovers(rovers) {\n  return rovers.map(data => {\n    // The format of the data require us to split on different cases\n    const [x, y, direction] = data[0].split(\" \");\n    const mainCommands = data[1].split(\"\");\n    return {\n      initialPosition: {\n        x: parseInt(x),\n        y: parseInt(y),\n        direction: direction\n      },\n      commands: mainCommands\n    };\n  });\n}\n\nasync function fetchCsv(dispatch, csvAddress) {\n  const response = await fetch(csvAddress);\n\n  if (response.body != null) {\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder(\"utf-8\");\n    const csv = await decoder.decode(result.value);\n    Papa.parse(csv, {\n      skipEmptyLines: true,\n      complete: ({\n        data\n      }) => {\n        dispatch({\n          type: \"loaded_rovers\",\n          payload: processRovers(data)\n        });\n      }\n    });\n  }\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return { ...state,\n        roversLeft: action.payload\n      };\n\n    case \"change_rovers\":\n      return { ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [...state.existingRoversPosition, action.payload]\n      };\n  }\n}\n\nfunction RoversGrid({\n  maxTerrainSize,\n  csvAddress\n}) {\n  _s();\n\n  const [{\n    existingRoversPosition,\n    roversLeft\n  }, dispatch] = useReducer(reducer, {\n    existingRoversPosition: [],\n    roversLeft: []\n  });\n  useEffect(() => {\n    fetchCsv(dispatch, csvAddress);\n  }, [csvAddress]);\n  useEffect(() => {\n    if (roversLeft.length > 0) {\n      const currentRover = roversLeft[0];\n      const roverFinalPosition = startRover(maxTerrainSize, currentRover.initialPosition, currentRover.commands, existingRoversPosition);\n      dispatch({\n        type: \"change_rovers\",\n        payload: roverFinalPosition\n      });\n    }\n  }, [existingRoversPosition, maxTerrainSize, roversLeft]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [...Array.from({\n      length: maxTerrainSize.y\n    }, (x, i) => i)].reverse().map((y, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [...Array(maxTerrainSize.x)].map((e, x) => {\n          debugger;\n          const roverHere = existingRoversPosition.findIndex(rover => {\n            return rover.x === x && rover.y === y;\n          });\n          return roverHere !== -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell occupied\",\n            children: [\"Rover \", roverHere + 1]\n          }, `row-${y}-col-${x}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"cell\",\n            children: \"\\xA0\"\n          }, `row-${y}-col-${x}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 19\n          }, this);\n        })\n      }, `row-${y}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RoversGrid, \"xcfIFu9ozLAMWCofSJumnmxKTRQ=\");\n\n_c = RoversGrid;\nexport default RoversGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoversGrid\");","map":{"version":3,"sources":["/home/conan/mars_rover/src/RoversGrid/RoversGrid.tsx"],"names":["Papa","React","useEffect","useReducer","startRover","processRovers","rovers","map","data","x","y","direction","split","mainCommands","initialPosition","parseInt","commands","fetchCsv","dispatch","csvAddress","response","fetch","body","reader","getReader","result","read","decoder","TextDecoder","csv","decode","value","parse","skipEmptyLines","complete","type","payload","reducer","state","action","roversLeft","slice","existingRoversPosition","RoversGrid","maxTerrainSize","length","currentRover","roverFinalPosition","Array","from","i","reverse","e","roverHere","findIndex","rover"],"mappings":"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","sourcesContent":["import Papa from \"papaparse\";\nimport React, { Dispatch, Reducer, useEffect, useReducer } from \"react\";\nimport startRover from \"../Rover/rover\";\nimport { Command, Direction } from \"../Rover/rover.types\";\nimport \"./rover-grid.css\";\nimport {\n  Action,\n  Data,\n  RoversGridProps,\n  State,\n  UndeployedRover,\n} from \"./roverGrid.types\";\n\nexport function processRovers(rovers: string[][]): UndeployedRover[] {\n  return rovers.map((data) => {\n    // The format of the data require us to split on different cases\n    const [x, y, direction] = data[0].split(\" \");\n    const mainCommands = data[1].split(\"\");\n\n    return {\n      initialPosition: {\n        x: parseInt(x),\n        y: parseInt(y),\n        direction: direction as Direction,\n      },\n      commands: mainCommands as Command[],\n    };\n  });\n}\n\nasync function fetchCsv(dispatch: Dispatch<Action>, csvAddress: string) {\n  const response = await fetch(csvAddress);\n\n  if (response.body != null) {\n    const reader = response.body.getReader();\n    const result = await reader.read();\n    const decoder = new TextDecoder(\"utf-8\");\n    const csv = await decoder.decode(result.value);\n\n    Papa.parse(csv, {\n      skipEmptyLines: true,\n      complete: ({ data }: Data) => {\n        dispatch({\n          type: \"loaded_rovers\",\n          payload: processRovers(data),\n        });\n      },\n    });\n  }\n}\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return {\n        ...state,\n        roversLeft: action.payload,\n      };\n    case \"change_rovers\":\n      return {\n        ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [\n          ...state.existingRoversPosition,\n          action.payload,\n        ],\n      };\n  }\n}\n\nfunction RoversGrid({ maxTerrainSize, csvAddress }: RoversGridProps) {\n  const [{ existingRoversPosition, roversLeft }, dispatch] = useReducer<\n    Reducer<State, Action>\n  >(reducer, {\n    existingRoversPosition: [],\n    roversLeft: [],\n  });\n\n  useEffect(() => {\n    fetchCsv(dispatch, csvAddress);\n  }, [csvAddress]);\n\n  useEffect(() => {\n    if (roversLeft.length > 0) {\n      const currentRover = roversLeft[0];\n\n      const roverFinalPosition = startRover(\n        maxTerrainSize,\n        currentRover.initialPosition,\n        currentRover.commands,\n        existingRoversPosition\n      );\n\n      dispatch({ type: \"change_rovers\", payload: roverFinalPosition });\n    }\n  }, [existingRoversPosition, maxTerrainSize, roversLeft]);\n\n  return (\n    <div className=\"App\">\n      {[...Array.from({ length: maxTerrainSize.y }, (x, i) => i)]\n        .reverse()\n        .map((y, i) => {\n          return (\n            <div className=\"container\" key={`row-${y}`}>\n              {[...Array(maxTerrainSize.x)].map((e, x) => {\n                debugger;\n\n                const roverHere = existingRoversPosition.findIndex((rover) => {\n                  return rover.x === x && rover.y === y;\n                });\n                return roverHere !== -1 ? (\n                  <div className=\"cell occupied\" key={`row-${y}-col-${x}`}>\n                    Rover {roverHere + 1}\n                  </div>\n                ) : (\n                  <div className=\"cell\" key={`row-${y}-col-${x}`}>\n                    &nbsp;\n                  </div>\n                );\n              })}\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RoversGrid;\n"]},"metadata":{},"sourceType":"module"}