{"ast":null,"code":"var _jsxFileName = \"/home/conan/mars_rover/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport { Direction } from \"./rover.types\";\nimport rover from \"./Rover\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst commandLeft = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n\n    case Direction.SOUTH:\n      return Direction.EAST;\n\n    case Direction.EAST:\n      return Direction.NORTH;\n\n    case Direction.WEST:\n      return Direction.SOUTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n\n    case Direction.SOUTH:\n      return Direction.WEST;\n\n    case Direction.EAST:\n      return Direction.SOUTH;\n\n    case Direction.WEST:\n      return Direction.NORTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = currentRoverPosition => {\n  switch (currentRoverPosition.position) {\n    case Direction.NORTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y + 1\n      };\n\n    case Direction.SOUTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y - 1\n      };\n\n    case Direction.EAST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    case Direction.WEST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    default:\n      return currentRoverPosition;\n  }\n};\n\nconst isOnMap = (state, bounds) => {\n  const newLocation = commandForward(state);\n  const xmax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const ymax = newLocation.y <= bounds.y && newLocation.y >= 0;\n  return ymax && xmax;\n};\n\nconst spaceIsEmpty = (existingRoversPosition, currentRoverPosition) => {\n  const newLocation = commandForward(currentRoverPosition); /// loop over and see if any of the other ones are there\n\n  const roverInSpot = existingRoversPosition.find(rover => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return { ...state,\n        roversLeft: action.payload\n      };\n\n    case \"change_rovers\":\n      return { ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [...state.existingRoversPosition, action.payload]\n      };\n  }\n}\n\nfunction App() {\n  _s();\n\n  ///// These will be done in the other file///////\n  const maxTerrainSize = {\n    x: 5,\n    y: 5\n  };\n  const [{\n    existingRoversPosition,\n    roversLeft\n  }, dispatch] = useReducer(reducer, {\n    existingRoversPosition: [],\n    roversLeft: []\n  });\n  useEffect(() => {\n    dispatch({\n      type: \"loaded_rovers\",\n      payload: [\"1 2 N | LMLMLMLMM\", \"1 2 N | LMLMLMLMR\"]\n    });\n  }, []);\n\n  if (roversLeft.length > 0) {\n    const currentRover = roversLeft[0];\n    const [startPostion, commands] = currentRover.split(\"|\");\n    const [x, y, position] = startPostion.split(\" \");\n    const mainCommands = commands.split(\"\");\n    const finalPostoin = rover(maxTerrainSize, {\n      x: parseInt(x),\n      y: parseInt(y),\n      position: position\n    }, mainCommands, existingRoversPosition);\n    dispatch({\n      type: \"change_rovers\",\n      payload: finalPostoin\n    });\n  }\n\n  console.log(\"existing\", existingRoversPosition);\n  console.log(\"left\", roversLeft);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: existingRoversPosition.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Knu8R3+I1MbzW4SOb97A+7ext7U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/conan/mars_rover/src/App.tsx"],"names":["React","useEffect","useReducer","Direction","rover","commandLeft","direction","NORTH","WEST","SOUTH","EAST","commandRight","commandForward","currentRoverPosition","position","y","x","isOnMap","state","bounds","newLocation","xmax","ymax","spaceIsEmpty","existingRoversPosition","roverInSpot","find","reducer","action","type","roversLeft","payload","slice","App","maxTerrainSize","dispatch","length","currentRover","startPostion","commands","split","mainCommands","finalPostoin","parseInt","console","log","map","item","index"],"mappings":"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","sourcesContent":["import React, { Reducer, useEffect, useReducer, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Direction, Command } from \"./rover.types\";\nimport Papa from \"papaparse\";\nimport rover from \"./Rover\";\n\nconst commandLeft = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n    case Direction.SOUTH:\n      return Direction.EAST;\n    case Direction.EAST:\n      return Direction.NORTH;\n    case Direction.WEST:\n      return Direction.SOUTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n    case Direction.SOUTH:\n      return Direction.WEST;\n    case Direction.EAST:\n      return Direction.SOUTH;\n    case Direction.WEST:\n      return Direction.NORTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = (currentRoverPosition: Rovers) => {\n  switch (currentRoverPosition.position) {\n    case Direction.NORTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y + 1,\n      };\n    case Direction.SOUTH:\n      return {\n        ...currentRoverPosition,\n\n        y: currentRoverPosition.y - 1,\n      };\n    case Direction.EAST:\n      return {\n        ...currentRoverPosition,\n\n        x: currentRoverPosition.x + 1,\n      };\n    case Direction.WEST:\n      return {\n        ...currentRoverPosition,\n\n        x: currentRoverPosition.x + 1,\n      };\n    default:\n      return currentRoverPosition;\n  }\n};\n\nconst isOnMap = (state: Rovers, bounds: { x: number; y: number }) => {\n  const newLocation = commandForward(state);\n\n  const xmax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const ymax = newLocation.y <= bounds.y && newLocation.y >= 0;\n\n  return ymax && xmax;\n};\n\nconst spaceIsEmpty = (\n  existingRoversPosition: Rovers[],\n  currentRoverPosition: Rovers\n) => {\n  const newLocation = commandForward(currentRoverPosition);\n\n  /// loop over and see if any of the other ones are there\n\n  const roverInSpot = existingRoversPosition.find((rover) => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\ntype Rovers = {\n  x: number;\n  y: number;\n  position: Direction;\n};\n\ntype State = {\n  existingRoversPosition: Rovers[];\n  roversLeft: string[];\n};\n\ntype Action =\n  | { type: \"loaded_rovers\"; payload: string[] }\n  | { type: \"change_rovers\"; payload: Rovers };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return {\n        ...state,\n        roversLeft: action.payload,\n      };\n    case \"change_rovers\":\n      return {\n        ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [\n          ...state.existingRoversPosition,\n          action.payload,\n        ],\n      };\n  }\n}\n\nfunction App() {\n  ///// These will be done in the other file///////\n  const maxTerrainSize = { x: 5, y: 5 };\n\n  const [{ existingRoversPosition, roversLeft }, dispatch] = useReducer<\n    Reducer<State, Action>\n  >(reducer, {\n    existingRoversPosition: [],\n    roversLeft: [],\n  });\n\n  useEffect(() => {\n    dispatch({\n      type: \"loaded_rovers\",\n      payload: [\"1 2 N | LMLMLMLMM\", \"1 2 N | LMLMLMLMR\"],\n    });\n  }, []);\n\n  if (roversLeft.length > 0) {\n    const currentRover = roversLeft[0];\n    const [startPostion, commands] = currentRover.split(\"|\");\n    const [x, y, position] = startPostion.split(\" \");\n    const mainCommands = commands.split(\"\");\n    const finalPostoin = rover(\n      maxTerrainSize,\n      { x: parseInt(x), y: parseInt(y), position: position as Direction },\n      mainCommands as Command[],\n      existingRoversPosition\n    );\n    dispatch({ type: \"change_rovers\", payload: finalPostoin });\n  }\n\n  console.log(\"existing\", existingRoversPosition);\n  console.log(\"left\", roversLeft);\n\n  return (\n    <div className=\"App\">\n      {existingRoversPosition.map((item, index) => {\n        return <li key={index}>{item}</li>;\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}