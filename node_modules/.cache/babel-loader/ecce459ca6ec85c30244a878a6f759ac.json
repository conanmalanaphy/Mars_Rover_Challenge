{"ast":null,"code":"var _jsxFileName = \"/home/conan/mars_rover/src/Rover.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport \"./App.css\";\nimport { Direction, Command } from \"./rover.types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst commandLeft = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n\n    case Direction.SOUTH:\n      return Direction.EAST;\n\n    case Direction.EAST:\n      return Direction.NORTH;\n\n    case Direction.WEST:\n      return Direction.SOUTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n\n    case Direction.SOUTH:\n      return Direction.WEST;\n\n    case Direction.EAST:\n      return Direction.SOUTH;\n\n    case Direction.WEST:\n      return Direction.NORTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = currentRoverPosition => {\n  switch (currentRoverPosition.position) {\n    case Direction.NORTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y + 1\n      };\n\n    case Direction.SOUTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y - 1\n      };\n\n    case Direction.EAST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    case Direction.WEST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    default:\n      return { ...currentRoverPosition\n      };\n  }\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"turnLeft\":\n      return { ...state,\n        currentRoverPosition: { ...state.currentRoverPosition,\n          position: commandLeft(state.currentRoverPosition.position)\n        }\n      };\n\n    case \"turnRight\":\n      return { ...state,\n        currentRoverPosition: { ...state.currentRoverPosition,\n          position: commandRight(state.currentRoverPosition.position)\n        }\n      };\n\n    case \"moveForward\":\n      return { ...state,\n        currentRoverPosition: { ...commandForward(state.currentRoverPosition)\n        }\n      };\n  }\n}\n\nconst isOnMap = (state, bounds) => {\n  const newLocation = commandForward(state);\n  const xmax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const ymax = newLocation.y <= bounds.y && newLocation.y >= 0;\n  return ymax && xmax;\n};\n\nconst spaceIsEmpty = (existingRoversPosition, currentRoverPosition) => {\n  const newLocation = commandForward(currentRoverPosition); /// loop over and see if any of the other ones are there\n\n  const roverInSpot = existingRoversPosition.find(rover => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\n\nfunction Rover({\n  maxTerrainSize,\n  startPostion,\n  commands,\n  existingRovers\n}) {\n  _s();\n\n  ///// These will be done in the other file///////\n  /// Really where it kicks off ///////\n  const [{\n    existingRoversPosition,\n    currentRoverPosition\n  }, dispatch] = useReducer(reducer, {\n    existingRoversPosition: existingRovers,\n    currentRoverPosition: {\n      x: startPostion.x,\n      y: startPostion.y,\n      position: startPostion.position\n    }\n  });\n  commands.forEach(c => {\n    if (c === Command.TURN_LEFT) {\n      dispatch({\n        type: \"turnLeft\"\n      });\n    } else if (c === Command.TURN_RIGHT) {\n      dispatch({\n        type: \"turnRight\"\n      });\n    } else if (c === Command.MOVE_FORWARD) {\n      if (isOnMap(currentRoverPosition, maxTerrainSize) && spaceIsEmpty(existingRoversPosition, currentRoverPosition)) {\n        dispatch({\n          type: \"moveForward\"\n        });\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: \"hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Rover, \"EZtNxFApFnMR6WBP/PnuhMtn3lk=\");\n\n_c = Rover;\nexport default Rover;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rover\");","map":{"version":3,"sources":["/home/conan/mars_rover/src/Rover.tsx"],"names":["React","useReducer","Direction","Command","commandLeft","direction","NORTH","WEST","SOUTH","EAST","commandRight","commandForward","currentRoverPosition","position","y","x","reducer","state","action","type","isOnMap","bounds","newLocation","xmax","ymax","spaceIsEmpty","existingRoversPosition","roverInSpot","find","rover","Rover","maxTerrainSize","startPostion","commands","existingRovers","dispatch","forEach","c","TURN_LEFT","TURN_RIGHT","MOVE_FORWARD"],"mappings":"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","sourcesContent":["import React, { Reducer, useEffect, useReducer, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Direction, Command } from \"./rover.types\";\nimport Papa from \"papaparse\";\n\nconst commandLeft = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n    case Direction.SOUTH:\n      return Direction.EAST;\n    case Direction.EAST:\n      return Direction.NORTH;\n    case Direction.WEST:\n      return Direction.SOUTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n    case Direction.SOUTH:\n      return Direction.WEST;\n    case Direction.EAST:\n      return Direction.SOUTH;\n    case Direction.WEST:\n      return Direction.NORTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = (currentRoverPosition: Rovers) => {\n  switch (currentRoverPosition.position) {\n    case Direction.NORTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y + 1,\n      };\n    case Direction.SOUTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y - 1,\n      };\n    case Direction.EAST:\n      return {\n        ...currentRoverPosition,\n        x: currentRoverPosition.x + 1,\n      };\n    case Direction.WEST:\n      return {\n        ...currentRoverPosition,\n        x: currentRoverPosition.x + 1,\n      };\n    default:\n      return { ...currentRoverPosition };\n  }\n};\n\ntype Rovers = {\n  x: number;\n  y: number;\n  position: Direction;\n};\n\ntype State = {\n  existingRoversPosition: Rovers[];\n  currentRoverPosition: Rovers;\n};\n\ntype Action =\n  | { type: \"turnLeft\" }\n  | { type: \"turnRight\" }\n  | { type: \"moveForward\" };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"turnLeft\":\n      return {\n        ...state,\n        currentRoverPosition: {\n          ...state.currentRoverPosition,\n          position: commandLeft(state.currentRoverPosition.position),\n        },\n      };\n    case \"turnRight\":\n      return {\n        ...state,\n        currentRoverPosition: {\n          ...state.currentRoverPosition,\n          position: commandRight(state.currentRoverPosition.position),\n        },\n      };\n    case \"moveForward\":\n      return {\n        ...state,\n        currentRoverPosition: {\n          ...commandForward(state.currentRoverPosition),\n        },\n      };\n  }\n}\n\nconst isOnMap = (state: Rovers, bounds: { x: number; y: number }) => {\n  const newLocation = commandForward(state);\n\n  const xmax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const ymax = newLocation.y <= bounds.y && newLocation.y >= 0;\n\n  return ymax && xmax;\n};\n\nconst spaceIsEmpty = (\n  existingRoversPosition: Rovers[],\n  currentRoverPosition: Rovers\n) => {\n  const newLocation = commandForward(currentRoverPosition);\n\n  /// loop over and see if any of the other ones are there\n\n  const roverInSpot = existingRoversPosition.find((rover) => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\n\ninterface RoverProps {\n  maxTerrainSize: {\n    x: number;\n    y: number;\n  };\n  startPostion: Rovers;\n  commands: Command[];\n  existingRovers: Rovers[];\n}\nfunction Rover({\n  maxTerrainSize,\n  startPostion,\n  commands,\n  existingRovers,\n}: RoverProps) {\n  ///// These will be done in the other file///////\n\n  /// Really where it kicks off ///////\n  const [{ existingRoversPosition, currentRoverPosition }, dispatch] =\n    useReducer<Reducer<State, Action>>(reducer, {\n      existingRoversPosition: existingRovers,\n      currentRoverPosition: {\n        x: startPostion.x,\n        y: startPostion.y,\n        position: startPostion.position,\n      },\n    });\n\n  commands.forEach((c) => {\n    if (c === Command.TURN_LEFT) {\n      dispatch({ type: \"turnLeft\" });\n    } else if (c === Command.TURN_RIGHT) {\n      dispatch({ type: \"turnRight\" });\n    } else if (c === Command.MOVE_FORWARD) {\n      if (\n        isOnMap(currentRoverPosition, maxTerrainSize) &&\n        spaceIsEmpty(existingRoversPosition, currentRoverPosition)\n      ) {\n        dispatch({ type: \"moveForward\" });\n      }\n    }\n  });\n\n  return <div className=\"App\">hi</div>;\n}\n\nexport default Rover;\n"]},"metadata":{},"sourceType":"module"}