{"ast":null,"code":"var _jsxFileName = \"/home/conan/mars_rover/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport rover from \"./Rover\";\nimport Papa from \"papaparse\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return { ...state,\n        roversLeft: action.payload\n      };\n\n    case \"change_rovers\":\n      return { ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [...state.existingRoversPosition, action.payload]\n      };\n  }\n}\n\nconst CSV_ADDRESS = \"rover_instructions.csv\";\n\nfunction App() {\n  _s();\n\n  const maxTerrainSize = {\n    x: 5,\n    y: 5\n  };\n  const [{\n    existingRoversPosition,\n    roversLeft\n  }, dispatch] = useReducer(reducer, {\n    existingRoversPosition: [],\n    roversLeft: []\n  });\n  useEffect(() => {\n    async function fetchCsv() {\n      const response = await fetch(CSV_ADDRESS);\n      console.log(\"loading more rovers\");\n\n      if (response.body != null) {\n        const reader = response.body.getReader();\n        const result = await reader.read();\n        const decoder = new TextDecoder(\"utf-8\");\n        const csv = await decoder.decode(result.value);\n        Papa.parse(csv, {\n          skipEmptyLines: true,\n          complete: data => {\n            const aa = data.data.map(data => {\n              const [x, y, position] = data[0].substring(1).split(\" \");\n              const mainCommands = data[1].slice(1, -1).split(\"\");\n              return {\n                startingPostion: {\n                  x: parseInt(x),\n                  y: parseInt(y),\n                  position: position\n                },\n                commands: mainCommands\n              };\n            });\n            dispatch({\n              type: \"loaded_rovers\",\n              payload: aa\n            });\n          }\n        });\n      }\n    }\n\n    fetchCsv();\n  }, []);\n  useEffect(() => {\n    //After Processing the first Rover we can move on to the next one\n    console.log(\"inside change rover\");\n\n    if (roversLeft.length > 0) {\n      const currentRover = roversLeft[0];\n      console.log(\"inside current rover\");\n      const roverFinalPostion = rover(maxTerrainSize, currentRover.startingPostion, currentRover.commands, existingRoversPosition);\n      dispatch({\n        type: \"change_rovers\",\n        payload: roverFinalPostion\n      });\n    }\n  }, [roversLeft, existingRoversPosition, maxTerrainSize]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [...Array(maxTerrainSize.x)].map((e, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [...Array(maxTerrainSize.y)].map((e, j) => {\n          const roverHere = existingRoversPosition.findIndex(rover => {\n            return rover.x === i && rover.y === j;\n          });\n          return roverHere !== -1 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item item2\",\n            children: [\"Rover \", roverHere + 1]\n          }, `row-${i}-col-${j}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \" item \",\n            children: \"\\xA0\"\n          }, `row-${i}-col-${j}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 17\n          }, this);\n        })\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xcfIFu9ozLAMWCofSJumnmxKTRQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/conan/mars_rover/src/App.tsx"],"names":["React","useEffect","useReducer","rover","Papa","reducer","state","action","type","roversLeft","payload","slice","existingRoversPosition","CSV_ADDRESS","App","maxTerrainSize","x","y","dispatch","fetchCsv","response","fetch","console","log","body","reader","getReader","result","read","decoder","TextDecoder","csv","decode","value","parse","skipEmptyLines","complete","data","aa","map","position","substring","split","mainCommands","startingPostion","parseInt","commands","length","currentRover","roverFinalPostion","Array","e","i","j","roverHere","findIndex"],"mappings":"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","sourcesContent":["import React, { Reducer, useEffect, useReducer } from \"react\";\nimport \"./App.css\";\nimport rover from \"./Rover\";\nimport { Command, Direction, Rovers } from \"./rover.types\";\nimport Papa from \"papaparse\";\n\ninterface RoversLeft {\n  startingPostion: Rovers;\n  commands: Command[];\n}\n\ntype State = {\n  existingRoversPosition: Rovers[];\n  roversLeft: RoversLeft[];\n};\n\ntype Action =\n  | { type: \"loaded_rovers\"; payload: RoversLeft[] }\n  | { type: \"change_rovers\"; payload: Rovers };\n\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"loaded_rovers\":\n      return {\n        ...state,\n        roversLeft: action.payload,\n      };\n    case \"change_rovers\":\n      return {\n        ...state,\n        roversLeft: [...state.roversLeft.slice(1)],\n        existingRoversPosition: [\n          ...state.existingRoversPosition,\n          action.payload,\n        ],\n      };\n  }\n}\nconst CSV_ADDRESS = \"rover_instructions.csv\";\nfunction App() {\n  const maxTerrainSize = { x: 5, y: 5 };\n\n  const [{ existingRoversPosition, roversLeft }, dispatch] = useReducer<\n    Reducer<State, Action>\n  >(reducer, {\n    existingRoversPosition: [],\n    roversLeft: [],\n  });\n\n  useEffect(() => {\n    async function fetchCsv() {\n      const response = await fetch(CSV_ADDRESS);\n      console.log(\"loading more rovers\");\n\n      if (response.body != null) {\n        const reader = response.body.getReader();\n        const result = await reader.read();\n        const decoder = new TextDecoder(\"utf-8\");\n        const csv = await decoder.decode(result.value);\n\n        Papa.parse(csv, {\n          skipEmptyLines: true,\n          complete: (data: any) => {\n            const aa = data.data.map((data: any) => {\n              const [x, y, position] = data[0].substring(1).split(\" \");\n              const mainCommands = data[1].slice(1, -1).split(\"\");\n\n              return {\n                startingPostion: {\n                  x: parseInt(x),\n                  y: parseInt(y),\n                  position: position as Direction,\n                },\n                commands: mainCommands as Command[],\n              };\n            });\n            dispatch({\n              type: \"loaded_rovers\",\n              payload: aa as RoversLeft[],\n            });\n          },\n        });\n      }\n    }\n    fetchCsv();\n  }, []);\n\n  useEffect(() => {\n    //After Processing the first Rover we can move on to the next one\n    console.log(\"inside change rover\");\n    if (roversLeft.length > 0) {\n      const currentRover = roversLeft[0];\n      console.log(\"inside current rover\");\n\n      const roverFinalPostion = rover(\n        maxTerrainSize,\n        currentRover.startingPostion,\n        currentRover.commands,\n        existingRoversPosition\n      );\n\n      dispatch({ type: \"change_rovers\", payload: roverFinalPostion });\n    }\n  }, [roversLeft, existingRoversPosition, maxTerrainSize]);\n\n  return (\n    <div className=\"App\">\n      {[...Array(maxTerrainSize.x)].map((e, i) => {\n        return (\n          <div className=\"container\" key={`row-${i}`}>\n            {[...Array(maxTerrainSize.y)].map((e, j) => {\n              const roverHere = existingRoversPosition.findIndex((rover) => {\n                return rover.x === i && rover.y === j;\n              });\n              return roverHere !== -1 ? (\n                <div className=\"item item2\" key={`row-${i}-col-${j}`}>\n                  Rover {roverHere + 1}\n                </div>\n              ) : (\n                <div className=\" item \" key={`row-${i}-col-${j}`}>\n                  &nbsp;\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}