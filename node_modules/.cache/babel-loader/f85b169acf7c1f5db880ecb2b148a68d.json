{"ast":null,"code":"import { Command, Direction } from \"./shared.types\";\n\nconst commandLeft = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n\n    case Direction.SOUTH:\n      return Direction.EAST;\n\n    case Direction.EAST:\n      return Direction.NORTH;\n\n    case Direction.WEST:\n      return Direction.SOUTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n\n    case Direction.SOUTH:\n      return Direction.WEST;\n\n    case Direction.EAST:\n      return Direction.SOUTH;\n\n    case Direction.WEST:\n      return Direction.NORTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = currentRoverPosition => {\n  switch (currentRoverPosition.direction) {\n    case Direction.NORTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y + 1\n      };\n\n    case Direction.SOUTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y - 1\n      };\n\n    case Direction.EAST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    case Direction.WEST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    default:\n      return { ...currentRoverPosition\n      };\n  }\n};\n\nconst isDestinationOnMap = (state, bounds) => {\n  const newLocation = commandForward(state);\n  const xMax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const yMax = newLocation.y <= bounds.y && newLocation.y >= 0;\n  return xMax && yMax;\n};\n\nconst isDestinationEmpty = (existingRoversPosition, currentRoverPosition) => {\n  const newLocation = commandForward(currentRoverPosition);\n  const roverInSpot = existingRoversPosition.find(rover => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\n\nfunction startRover(maxTerrainSize, initialPosition, commands, existingRovers) {\n  let roverPosition = initialPosition;\n  commands.forEach(command => {\n    if (command === Command.TURN_LEFT) {\n      roverPosition = { ...roverPosition,\n        direction: commandLeft(roverPosition.direction)\n      };\n    } else if (command === Command.TURN_RIGHT) {\n      roverPosition = { ...roverPosition,\n        direction: commandRight(roverPosition.direction)\n      };\n    } else if (command === Command.MOVE_FORWARD) {\n      if (isDestinationOnMap(roverPosition, maxTerrainSize) && isDestinationEmpty(existingRovers, roverPosition)) {\n        roverPosition = { ...commandForward(roverPosition)\n        };\n      }\n    }\n  });\n  return roverPosition;\n}\n\nexport default startRover;","map":{"version":3,"sources":["/home/conan/mars_rover/src/Rover.tsx"],"names":["Command","Direction","commandLeft","direction","NORTH","WEST","SOUTH","EAST","commandRight","commandForward","currentRoverPosition","y","x","isDestinationOnMap","state","bounds","newLocation","xMax","yMax","isDestinationEmpty","existingRoversPosition","roverInSpot","find","rover","startRover","maxTerrainSize","initialPosition","commands","existingRovers","roverPosition","forEach","command","TURN_LEFT","TURN_RIGHT","MOVE_FORWARD"],"mappings":"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","sourcesContent":["import { Command, Direction, Rovers, MaxTerrainSize } from \"./shared.types\";\n\nconst commandLeft = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n    case Direction.SOUTH:\n      return Direction.EAST;\n    case Direction.EAST:\n      return Direction.NORTH;\n    case Direction.WEST:\n      return Direction.SOUTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n    case Direction.SOUTH:\n      return Direction.WEST;\n    case Direction.EAST:\n      return Direction.SOUTH;\n    case Direction.WEST:\n      return Direction.NORTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = (currentRoverPosition: Rovers) => {\n  switch (currentRoverPosition.direction) {\n    case Direction.NORTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y + 1,\n      };\n    case Direction.SOUTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y - 1,\n      };\n    case Direction.EAST:\n      return {\n        ...currentRoverPosition,\n        x: currentRoverPosition.x + 1,\n      };\n    case Direction.WEST:\n      return {\n        ...currentRoverPosition,\n        x: currentRoverPosition.x + 1,\n      };\n    default:\n      return { ...currentRoverPosition };\n  }\n};\n\nconst isDestinationOnMap = (\n  state: Rovers,\n  bounds: { x: number; y: number }\n) => {\n  const newLocation = commandForward(state);\n\n  const xMax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const yMax = newLocation.y <= bounds.y && newLocation.y >= 0;\n\n  return xMax && yMax;\n};\n\nconst isDestinationEmpty = (\n  existingRoversPosition: Rovers[],\n  currentRoverPosition: Rovers\n) => {\n  const newLocation = commandForward(currentRoverPosition);\n\n  const roverInSpot = existingRoversPosition.find((rover) => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n\n  return !roverInSpot;\n};\n\nfunction startRover(\n  maxTerrainSize: MaxTerrainSize,\n  initialPosition: Rovers,\n  commands: Command[],\n  existingRovers: Rovers[]\n) {\n  let roverPosition = initialPosition;\n\n  commands.forEach((command) => {\n    if (command === Command.TURN_LEFT) {\n      roverPosition = {\n        ...roverPosition,\n        direction: commandLeft(roverPosition.direction),\n      };\n    } else if (command === Command.TURN_RIGHT) {\n      roverPosition = {\n        ...roverPosition,\n        direction: commandRight(roverPosition.direction),\n      };\n    } else if (command === Command.MOVE_FORWARD) {\n      if (\n        isDestinationOnMap(roverPosition, maxTerrainSize) &&\n        isDestinationEmpty(existingRovers, roverPosition)\n      ) {\n        roverPosition = {\n          ...commandForward(roverPosition),\n        };\n      }\n    }\n  });\n\n  return roverPosition;\n}\n\nexport default startRover;\n"]},"metadata":{},"sourceType":"module"}