{"ast":null,"code":"import { Command, Direction } from \"./rover.types\";\n\nconst commandLeft = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n\n    case Direction.SOUTH:\n      return Direction.EAST;\n\n    case Direction.EAST:\n      return Direction.NORTH;\n\n    case Direction.WEST:\n      return Direction.SOUTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = direction => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n\n    case Direction.SOUTH:\n      return Direction.WEST;\n\n    case Direction.EAST:\n      return Direction.SOUTH;\n\n    case Direction.WEST:\n      return Direction.NORTH;\n\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = currentRoverPosition => {\n  switch (currentRoverPosition.direction) {\n    case Direction.NORTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y + 1\n      };\n\n    case Direction.SOUTH:\n      return { ...currentRoverPosition,\n        y: currentRoverPosition.y - 1\n      };\n\n    case Direction.EAST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    case Direction.WEST:\n      return { ...currentRoverPosition,\n        x: currentRoverPosition.x + 1\n      };\n\n    default:\n      return { ...currentRoverPosition\n      };\n  }\n};\n\nconst isOnMap = (state, bounds) => {\n  const newLocation = commandForward(state);\n  const xmax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const ymax = newLocation.y <= bounds.y && newLocation.y >= 0;\n  return ymax && xmax;\n};\n\nconst spaceIsEmpty = (existingRoversPosition, currentRoverPosition) => {\n  const newLocation = commandForward(currentRoverPosition);\n  const roverInSpot = existingRoversPosition.find(rover => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\n\nfunction Rover(maxTerrainSize, initialPosition, commands, existingRovers) {\n  commands.forEach(c => {\n    if (c === Command.TURN_LEFT) {\n      return { ...initialPosition,\n        position: commandLeft(initialPosition.direction)\n      };\n    } else if (c === Command.TURN_RIGHT) {\n      return { ...initialPosition,\n        position: commandRight(initialPosition.direction)\n      };\n    } else if (c === Command.MOVE_FORWARD) {\n      if (isOnMap(initialPosition, maxTerrainSize) && spaceIsEmpty(existingRovers, initialPosition)) {\n        return { ...commandForward(initialPosition)\n        };\n      }\n    } else {\n      return initialPosition;\n    }\n  });\n}\n\n_c = Rover;\nexport default Rover;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rover\");","map":{"version":3,"sources":["/home/conan/mars_rover/src/Rover.tsx"],"names":["Command","Direction","commandLeft","direction","NORTH","WEST","SOUTH","EAST","commandRight","commandForward","currentRoverPosition","y","x","isOnMap","state","bounds","newLocation","xmax","ymax","spaceIsEmpty","existingRoversPosition","roverInSpot","find","rover","Rover","maxTerrainSize","initialPosition","commands","existingRovers","forEach","c","TURN_LEFT","position","TURN_RIGHT","MOVE_FORWARD"],"mappings":"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","sourcesContent":["import { Command, Direction, Rovers } from \"./rover.types\";\n\nconst commandLeft = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.WEST;\n    case Direction.SOUTH:\n      return Direction.EAST;\n    case Direction.EAST:\n      return Direction.NORTH;\n    case Direction.WEST:\n      return Direction.SOUTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandRight = (direction: Direction) => {\n  switch (direction) {\n    case Direction.NORTH:\n      return Direction.EAST;\n    case Direction.SOUTH:\n      return Direction.WEST;\n    case Direction.EAST:\n      return Direction.SOUTH;\n    case Direction.WEST:\n      return Direction.NORTH;\n    default:\n      return direction;\n  }\n};\n\nconst commandForward = (currentRoverPosition: Rovers) => {\n  switch (currentRoverPosition.direction) {\n    case Direction.NORTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y + 1,\n      };\n    case Direction.SOUTH:\n      return {\n        ...currentRoverPosition,\n        y: currentRoverPosition.y - 1,\n      };\n    case Direction.EAST:\n      return {\n        ...currentRoverPosition,\n        x: currentRoverPosition.x + 1,\n      };\n    case Direction.WEST:\n      return {\n        ...currentRoverPosition,\n        x: currentRoverPosition.x + 1,\n      };\n    default:\n      return { ...currentRoverPosition };\n  }\n};\n\nconst isOnMap = (state: Rovers, bounds: { x: number; y: number }) => {\n  const newLocation = commandForward(state);\n\n  const xmax = newLocation.x <= bounds.x && newLocation.x >= 0;\n  const ymax = newLocation.y <= bounds.y && newLocation.y >= 0;\n\n  return ymax && xmax;\n};\n\nconst spaceIsEmpty = (\n  existingRoversPosition: Rovers[],\n  currentRoverPosition: Rovers\n) => {\n  const newLocation = commandForward(currentRoverPosition);\n\n  const roverInSpot = existingRoversPosition.find((rover) => {\n    return rover.x === newLocation.x && rover.y === newLocation.y;\n  });\n  return !roverInSpot;\n};\n\ninterface RoverProps {\n  maxTerrainSize: {\n    x: number;\n    y: number;\n  };\n  startPosition: Rovers;\n  commands: Command[];\n  existingRovers: Rovers[];\n}\nfunction Rover(\n  maxTerrainSize: {\n    x: number;\n    y: number;\n  },\n  initialPosition: Rovers,\n  commands: Command[],\n  existingRovers: Rovers[]\n) {\n  commands.forEach((c) => {\n    if (c === Command.TURN_LEFT) {\n      return {\n        ...initialPosition,\n        position: commandLeft(initialPosition.direction),\n      };\n    } else if (c === Command.TURN_RIGHT) {\n      return {\n        ...initialPosition,\n        position: commandRight(initialPosition.direction),\n      };\n    } else if (c === Command.MOVE_FORWARD) {\n      if (\n        isOnMap(initialPosition, maxTerrainSize) &&\n        spaceIsEmpty(existingRovers, initialPosition)\n      ) {\n        return {\n          ...commandForward(initialPosition),\n        };\n      }\n    } else {\n      return initialPosition;\n    }\n  });\n}\n\nexport default Rover;\n"]},"metadata":{},"sourceType":"module"}